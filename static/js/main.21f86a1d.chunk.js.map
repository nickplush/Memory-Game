{"version":3,"sources":["actions/gameInfoActions.js","components/page/recordPage/recordsPage.js","components/page/gamePage/images/aa.png","components/page/gamePage/images/nirvana.png","components/page/gamePage/images/kish.png","components/page/gamePage/images/tfk.png","components/page/gamePage/images/am.png","components/page/gamePage/images/tdg.png","components/page/gamePage/images/gd.png","components/page/gamePage/images/lp.png","components/page/gamePage/images/fon.png","components/page/gamePage/Card.js","components/page/gamePage/modalWindow.js","components/page/gamePage/PlayingField.js","components/page/gamePage/gamePage.js","components/page/ startPage/images/logo.png","components/page/ startPage/startPage.js","components/router/Router.js","App.js","index.js","reducers/index.js"],"names":["getGameInfo","info","dispatch","type","payload","useStyles","makeStyles","button","background","color","margin","marginLeft","RecordsPage","classes","records","useSelector","state","rows","Object","keys","map","item","name","time","score","sort","a","b","to","Button","variant","className","Typography","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","row","scope","img","height","width","logo","container","padding","Card","onClick","id","value","done","useState","isFlip","setIsFlip","useEffect","checkFlip","inState","indexOf","isDone","Grid","xs","src","fon","ModalWindow","open","errors","restart","useDispatch","gameInfo","timeIsSek","playerScore","results","lastPlayer","Math","round","changeRecords","localStorage","setItem","JSON","stringify","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","PlayingField","array","setState","setDone","error","setError","setOpen","setTime","length","Date","getTime","startGame","setTimeout","timeNow","checkValue","newValue","i","spacing","justify","marginBottom","GamePage","content","AskAleks","Nirvana","Kish","TFK","Am","TGH","Gd","LP","newArray","j","floor","random","shuffleArray","concat","root","minHeight","display","flexDirection","alignItems","justifyContent","maxWidth","StartPage","gameData","names","setNames","lastPlayers","setValue","savePlayer","push","newGameData","players","Autocomplete","onChange","event","inputValue","onInputChange","freeSolo","options","option","style","renderInput","params","TextField","label","disabled","Router","console","log","Boolean","path","exact","App","parse","getItem","store","createStore","action","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.21f86a1d.chunk.js","sourcesContent":["export const getGameInfo = (info) => dispatch => {\n    dispatch({ type: 'GET_INFO', payload: info })\n}\nexport const changeRecords = (results) => dispatch => {\n    dispatch({ type: 'CHANGE_RECORDS', payload: results })\n}\n","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {\n    Button,\n    makeStyles,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow, Typography\n} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    button: {\n        background: \"black\",\n        color: \"white\",\n        margin: 10,\n        marginLeft: 0,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    }\n});\n\n\nconst RecordsPage = () => {\n    const classes = useStyles()\n    const records = useSelector(state => state.records)\n    const array = Object.keys(records).map(item=> ({name: item, time: records[item].time, score: records[item].score}))\n    const rows = array.sort((a,b)=>b.score - a.score)\nreturn (\n    <div>\n        <Link to={'/game'}>\n            <Button variant={\"contained\"}\n                    color={\"primary\"}\n                    className={classes.button}\n            >\n                Restart\n            </Button>\n        </Link>\n        <Link to={'/'}>\n            <Button variant={\"contained\"}\n                    className={classes.button}\n                    color={\"primary\"}\n            >\n                reset game\n            </Button>\n        </Link>\n        <Typography variant={'h3'}>Game Score</Typography>\n        <TableContainer component={Paper}>\n            <Table size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Time</TableCell>\n                        <TableCell>Score</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.time}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.score}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    </div>\n)\n}\n\nexport default RecordsPage\n","export default __webpack_public_path__ + \"static/media/aa.c16240f3.png\";","export default __webpack_public_path__ + \"static/media/nirvana.fb4f99fb.png\";","export default __webpack_public_path__ + \"static/media/kish.a839ca22.png\";","export default __webpack_public_path__ + \"static/media/tfk.a0b6f1c9.png\";","export default __webpack_public_path__ + \"static/media/am.c1caf580.png\";","export default __webpack_public_path__ + \"static/media/tdg.31e7ba33.png\";","export default __webpack_public_path__ + \"static/media/gd.a5a3bd8f.png\";","export default __webpack_public_path__ + \"static/media/lp.f3278b45.png\";","export default __webpack_public_path__ + \"static/media/fon.df6f7535.png\";","import React, {useEffect, useState} from 'react';\nimport {Grid, makeStyles, Paper} from \"@material-ui/core\";\nimport fon from './images/fon.png'\n\nconst useStyles = makeStyles({\n    img: {\n        height: '30%',\n        width: 'auto'\n    },\n    logo: {\n        height: '60%',\n        width: 'auto'\n    },\n    container: {\n        margin: 0,\n        width: '100%',\n        padding: 20\n    }\n});\n\nconst Card = ({\n                  item,\n                  onClick,\n                  id,\n                  value,\n                  done\n              }) => {\n    const classes = useStyles()\n    const [isFlip, setIsFlip] = useState(false)\n\n    useEffect(() => checkFlip(), [value, done])\n\n    const checkFlip = () => {\n        const stateNames = value.map(item => item.id)\n        const inState = stateNames.indexOf(id)\n        const isDone = done.indexOf(item)\n        if (inState !== -1 || isDone !== -1) {\n            setIsFlip(true)\n        } else {\n            setIsFlip(false)\n        }\n    }\n\n    const checkValue = () => {\n        if (!isFlip) {\n            onClick(item, id)\n        }\n    }\n\n    return (\n        <Grid item xs={3} className={classes.container} onClick={checkValue}>\n            <div className={isFlip ? 'flip-container active' : 'flip-container'}>\n                <div className=\"flipper\">\n                    <Paper className=\"front\">\n                        <img className={classes.logo} src={fon}/>\n                    </Paper>\n                    <Paper className=\"back\">\n                        <img className={classes.img} src={item}/>\n                    </Paper>\n                </div>\n            </div>\n        </Grid>\n    )\n}\n\nexport default Card\n","import React, {useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Link} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeRecords} from \"../../../actions/gameInfoActions\";\n\nconst ModalWindow = ({open, errors, time, restart}) => {\n    const dispatch = useDispatch()\n    const gameInfo = useSelector(state => state)\n    const timeIsSek = time / 1000\n    const score = 100\n    const scoreCof = 0.25\n    const playerScore = score - (scoreCof * (timeIsSek + errors * 5)) < 0 ? 0 : score - (scoreCof * (timeIsSek + errors * 5))\n    const results = {...gameInfo.records, [gameInfo.lastPlayer]: {score: Math.round(playerScore), time: timeIsSek}}\n\n\n    useEffect(() => {dispatch(changeRecords(results))},[])\n    useEffect(()=> localStorage.setItem('game',JSON.stringify({...gameInfo,records: results})),[])\n\n    return (\n        <Dialog\n            open={open}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"You made it!\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    <div>errors: {errors}</div>\n                    <div>time: {timeIsSek} s</div>\n                    <div>score: {Math.round(playerScore)}</div>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Link to={'/game'}>\n                    <Button color=\"primary\" onClick={restart}>\n                        Restart Game\n                    </Button>\n                </Link>\n                <Link to={'/'}>\n                    <Button color=\"primary\">\n                        Reset Game\n                    </Button>\n                </Link>\n                <Link to={'/records'}>\n                    <Button color=\"primary\">\n                        Results\n                    </Button>\n                </Link>\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default ModalWindow\n","import React, {useEffect, useState} from 'react';\nimport {Grid} from \"@material-ui/core\";\nimport Card from \"./Card\";\nimport ModalWindow from \"./modalWindow\";\n\nconst PlayingField = ({array}) => {\n    const [state, setState] = useState([])\n    const [done, setDone] = useState([...array])\n    const [error, setError] = useState(0)\n    const [open, setOpen] = useState(false)\n    const [time, setTime] = useState(0)\n\n    useEffect(() => {\n        if (done.length === array.length / 2) {\n            setTime(new Date().getTime() - time)\n            setOpen(true)\n        }\n    }, [done])\n    useEffect(() => startGame(), [])\n    useEffect(() => {\n        if (state.length === 2) {\n            const check = state[0].id !== state[1].id && state[0].value === state[1].value\n            if (check) {\n                setDone([...done, state[0].value])\n            } else {\n                setError(error + 1)\n            }\n            setTimeout(() => setState([]), 800)\n        }\n    }, [state])\n\n    const restart = () => {\n        setDone([...array])\n        setOpen(false)\n        setError(0)\n        setTime(0)\n        startGame()\n    }\n\n    const startGame = () => {\n        setTimeout(() => {\n            setDone([])\n            const timeNow = new Date().getTime()\n            setTime(timeNow)\n            setState([])\n        }, 5000)\n    }\n\n    const checkValue = (newValue, i) => {\n        if (state.length < 2) {\n            setState([...state, {id: i, value: newValue}])\n        }\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3} justify={\"center\"}>\n                {array.map((item, i) => <Card key={i}\n                                              id={i}\n                                              item={item}\n                                              done={done}\n                                              onClick={checkValue}\n                                              value={state}/>\n                )}\n            </Grid>\n            {open &&\n            <ModalWindow open={open} errors={error} time={time} restart={restart}/>\n            }\n        </div>\n    )\n}\n\nexport default PlayingField\n","import React from 'react';\nimport AskAleks from './images/aa.png'\nimport Nirvana from './images/nirvana.png'\nimport Kish from './images/kish.png'\nimport TFK from './images/tfk.png'\nimport Am from './images/am.png'\nimport TGH from './images/tdg.png'\nimport Gd from './images/gd.png'\nimport LP from './images/lp.png'\nimport PlayingField from \"./PlayingField\";\nimport {Link} from \"react-router-dom\";\nimport {Button, makeStyles} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    button: {\n        background: \"black\",\n        color: \"white\",\n        marginBottom: 10,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    },\n});\n\nconst GamePage = () => {\n    const content = [AskAleks, Nirvana, Kish, TFK, Am, TGH, Gd, LP]\n    const classes = useStyles()\n    const dblArr = () => {\n        return content.concat(content)\n    }\n\n    const shuffleArray = (array) => {\n        let newArray = array\n        for (let i = newArray.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n        }\n        return newArray\n    }\n    return (\n        <div>\n            <Link to={'/'}>\n                <Button variant={\"contained\"}\n                        color={\"primary\"}\n                        className={classes.button}\n                >\n                    reset game\n                </Button>\n            </Link>\n            <PlayingField array={shuffleArray(dblArr())}/>\n        </div>\n    )\n}\n\nexport default GamePage\n","export default __webpack_public_path__ + \"static/media/logo.df6f7535.png\";","import React, {useEffect, useState} from 'react';\nimport {Button, makeStyles, TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {Link} from \"react-router-dom\";\nimport logo from './images/logo.png'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getGameInfo} from \"../../../actions/gameInfoActions\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        minHeight: '85vh',\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    button: {\n        background: \"black\",\n        color: \"white\",\n        margin: 25,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    },\n    logo: {\n        maxWidth:'90%'\n    }\n});\n\nconst StartPage = () => {\n    const dispatch = useDispatch()\n    const gameData = useSelector(state => state)\n    const [names, setNames] = useState([])\n    const lastPlayers = gameData.lastPlayer || ''\n    const [value, setValue] = useState('');\n\n\n    const getPlayersNames = () => {\n        if (gameData.players) {\n            setNames(gameData.players)\n        }\n    }\n\n    const savePlayer = () => {\n        if (names.indexOf(value) === -1) {\n            names.push(value)\n        }\n        const newGameData = {...gameData, players: names, lastPlayer: value}\n        localStorage.setItem('game',JSON.stringify(newGameData))\n        dispatch(getGameInfo(newGameData))\n    }\n\n    const renderButton = () => {\n        if (!value) {\n            return (\n                <Button variant={\"contained\"}\n                        disabled\n                        className={classes.button}\n                >\n                    start\n                </Button>\n            )\n        }\n        return (\n            <Link to={'/game'}>\n                <Button variant={\"contained\"}\n                        color={\"primary\"}\n                        className={classes.button}\n                        onClick={savePlayer}\n                >\n                    start\n                </Button>\n            </Link>\n        )\n    }\n\n    useEffect(() => getPlayersNames(), [])\n\n    const classes = useStyles()\n    return (\n        <div className={classes.root}>\n            <img src={logo} className={classes.logo}/>\n            <br/>\n            <Autocomplete\n                value={lastPlayers}\n                onChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n                inputValue={value || ''}\n                onInputChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n                freeSolo\n                id=\"free-solo-demo\"\n                options={names.map((option) => option)}\n                style={{width: '300px'}}\n                renderInput={(params) => (\n                    <TextField {...params} label=\"Who are you?\" margin=\"normal\" variant=\"outlined\"/>\n                )}\n            />\n            {renderButton()}\n        </div>\n    )\n}\n\nexport default StartPage\n","import {BrowserRouter, Route, Redirect,Switch} from 'react-router-dom'\nimport {useSelector} from \"react-redux\";\nimport RecordsPage from \"../page/recordPage/recordsPage\";\nimport GamePage from \"../page/gamePage/gamePage\";\nimport StartPage from \"../page/ startPage/startPage\";\n\nfunction Router() {\n    const gameData = useSelector(state => state)\n    console.log('LOOOG', Boolean(gameData.records))\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path={'/'} exact component={StartPage}/>\n                {gameData.lastPlayer &&\n                <Route path={'/game'} component={GamePage}/>\n                }\n                {Boolean(gameData.records) &&\n                <Route path={'/records'} component={RecordsPage}/>\n                }\n                <Redirect to=\"/\" />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default Router;\n","import './App.css';\nimport {useDispatch} from \"react-redux\";\nimport {getGameInfo} from \"./actions/gameInfoActions\";\nimport Router from \"./components/router/Router\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const gameData = JSON.parse(localStorage.getItem('game')) || {}\n    dispatch(getGameInfo(gameData))\n    return <Router/>\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport reducer from './reducers/index'\nimport App from './App'\n\nconst store = createStore(reducer, {}, applyMiddleware(reduxThunk))\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.querySelector('#root')\n)\n\n","export default function (state = {}, action) {\n    switch (action.type) {\n        case 'GET_INFO':\n            return action.payload\n        case 'CHANGE_RECORDS':\n            return {...state,records: action.payload}\n        default:\n            return state\n    }\n}\n"],"sourceRoot":""}