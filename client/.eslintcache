[{"/home/niko/work/pokeGame/poke-game/client/src/index.js":"1","/home/niko/work/pokeGame/poke-game/client/src/App.js":"2","/home/niko/work/pokeGame/poke-game/client/src/reducers/index.js":"3","/home/niko/work/pokeGame/poke-game/client/src/actions/gameInfoActions.js":"4","/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/gamePage.js":"5","/home/niko/work/pokeGame/poke-game/client/src/components/page/ startPage/startPage.js":"6","/home/niko/work/pokeGame/poke-game/client/src/components/page/recordPage/recordsPage.js":"7","/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/PlayingField.js":"8","/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/Card.js":"9","/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/modalWindow.js":"10"},{"size":425,"mtime":1610791223097,"results":"11","hashOfConfig":"12"},{"size":791,"mtime":1610973328365,"results":"13","hashOfConfig":"12"},{"size":268,"mtime":1610799693767,"results":"14","hashOfConfig":"12"},{"size":220,"mtime":1610799848459,"results":"15","hashOfConfig":"12"},{"size":1558,"mtime":1610970979986,"results":"16","hashOfConfig":"12"},{"size":3067,"mtime":1610977793018,"results":"17","hashOfConfig":"12"},{"size":2469,"mtime":1610806231975,"results":"18","hashOfConfig":"12"},{"size":2142,"mtime":1611038764799,"results":"19","hashOfConfig":"12"},{"size":1677,"mtime":1611039251998,"results":"20","hashOfConfig":"12"},{"size":2353,"mtime":1610963917327,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"zurq69",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"/home/niko/work/pokeGame/poke-game/client/src/index.js",[],["48","49"],"/home/niko/work/pokeGame/poke-game/client/src/App.js",[],"/home/niko/work/pokeGame/poke-game/client/src/reducers/index.js",["50"],"export default function (state = {}, action) {\n    switch (action.type) {\n        case 'GET_INFO':\n            return action.payload\n        case 'CHANGE_RECORDS':\n            return {...state,records: action.payload}\n        default:\n            return state\n    }\n}\n","/home/niko/work/pokeGame/poke-game/client/src/actions/gameInfoActions.js",[],"/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/gamePage.js",[],"/home/niko/work/pokeGame/poke-game/client/src/components/page/ startPage/startPage.js",["51","52"],"import React, {useEffect, useState} from 'react';\nimport {Button, makeStyles, TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {Link} from \"react-router-dom\";\nimport logo from './images/logo.png'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getGameInfo} from \"../../../actions/gameInfoActions\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        minHeight: '85vh',\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    button: {\n        background: \"black\",\n        color: \"white\",\n        margin: 25,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    },\n    logo: {\n        maxWidth:'90%'\n    }\n});\n\nconst StartPage = () => {\n    const dispatch = useDispatch()\n    const gameData = useSelector(state => state)\n    const [names, setNames] = useState([])\n    const lastPlayers = gameData.lastPlayer || ''\n    const [value, setValue] = useState('');\n\n\n    const getPlayersNames = () => {\n        if (gameData.players) {\n            setNames(gameData.players)\n        }\n    }\n\n    const savePlayer = () => {\n        if (names.indexOf(value) === -1) {\n            names.push(value)\n        }\n        const newGameData = {...gameData, players: names, lastPlayer: value}\n        localStorage.setItem('game',JSON.stringify(newGameData))\n        dispatch(getGameInfo(newGameData))\n    }\n\n    const renderButton = () => {\n        if (!value) {\n            return (\n                <Button variant={\"contained\"}\n                        disabled\n                        className={classes.button}\n                >\n                    start\n                </Button>\n            )\n        }\n        return (\n            <Link to={'/game'}>\n                <Button variant={\"contained\"}\n                        color={\"primary\"}\n                        className={classes.button}\n                        onClick={savePlayer}\n                >\n                    start\n                </Button>\n            </Link>\n        )\n    }\n\n    useEffect(() => getPlayersNames(), [])\n\n    const classes = useStyles()\n    return (\n        <div className={classes.root}>\n            <img src={logo} className={classes.logo}/>\n            <br/>\n            <Autocomplete\n                value={lastPlayers}\n                onChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n                inputValue={value || ''}\n                onInputChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n                freeSolo\n                id=\"free-solo-demo\"\n                options={names.map((option) => option)}\n                style={{width: '300px'}}\n                renderInput={(params) => (\n                    <TextField {...params} label=\"Who are you?\" margin=\"normal\" variant=\"outlined\"/>\n                )}\n            />\n            {renderButton()}\n        </div>\n    )\n}\n\nexport default StartPage\n","/home/niko/work/pokeGame/poke-game/client/src/components/page/recordPage/recordsPage.js",[],"/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/PlayingField.js",["53","54"],"import React, {useEffect, useState} from 'react';\nimport {Grid} from \"@material-ui/core\";\nimport Card from \"./Card\";\nimport ModalWindow from \"./modalWindow\";\n\nconst PlayingField = ({array}) => {\n    const [state, setState] = useState([])\n    const [done, setDone] = useState([...array])\n    const [error, setError] = useState(0)\n    const [open, setOpen] = useState(false)\n    const [time, setTime] = useState(0)\n\n    useEffect(() => {\n        if (done.length === array.length / 2) {\n            setTime(new Date().getTime() - time)\n            setOpen(true)\n        }\n    }, [done])\n    useEffect(() => startGame(), [])\n    useEffect(() => {\n        if (state.length === 2) {\n            const check = state[0].id !== state[1].id && state[0].value === state[1].value\n            if (check) {\n                setDone([...done, state[0].value])\n            } else {\n                setError(error + 1)\n            }\n            setTimeout(() => setState([]), 800)\n        }\n    }, [state])\n\n    const restart = () => {\n        setDone([...array])\n        setOpen(false)\n        setError(0)\n        setTime(0)\n        startGame()\n    }\n\n    const startGame = () => {\n        setTimeout(() => {\n            setDone([])\n            const timeNow = new Date().getTime()\n            setTime(timeNow)\n            setState([])\n        }, 5000)\n    }\n\n    const checkValue = (newValue, i) => {\n        if (state.length < 2) {\n            setState([...state, {id: i, value: newValue}])\n        }\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3} justify={\"center\"}>\n                {array.map((item, i) => <Card key={i}\n                                              id={i}\n                                              item={item}\n                                              done={done}\n                                              onClick={checkValue}\n                                              value={state}/>\n                )}\n            </Grid>\n            {open &&\n            <ModalWindow open={open} errors={error} time={time} restart={restart}/>\n            }\n        </div>\n    )\n}\n\nexport default PlayingField\n","/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/Card.js",["55","56","57"],"import React, {useEffect, useState} from 'react';\nimport {Grid, makeStyles, Paper} from \"@material-ui/core\";\nimport fon from './images/fon.png'\n\nconst useStyles = makeStyles({\n    img: {\n        height: '30%',\n        width: 'auto'\n    },\n    logo: {\n        height: '60%',\n        width: 'auto'\n    },\n    container: {\n        margin: 0,\n        width: '100%',\n        padding: 20\n    }\n});\n\nconst Card = ({\n                  item,\n                  onClick,\n                  id,\n                  value,\n                  done\n              }) => {\n    const classes = useStyles()\n    const [isFlip, setIsFlip] = useState(false)\n\n    useEffect(() => checkFlip(), [value, done])\n\n    const checkFlip = () => {\n        const stateNames = value.map(item => item.id)\n        const inState = stateNames.indexOf(id)\n        const isDone = done.indexOf(item)\n        if (inState !== -1 || isDone !== -1) {\n            setIsFlip(true)\n        } else {\n            setIsFlip(false)\n        }\n    }\n\n    const checkValue = () => {\n        if (!isFlip) {\n            onClick(item, id)\n        }\n    }\n\n    return (\n        <Grid item xs={3} className={classes.container} onClick={checkValue}>\n            <div className={isFlip ? 'flip-container active' : 'flip-container'}>\n                <div className=\"flipper\">\n                    <Paper className=\"front\">\n                        <img className={classes.logo} src={fon}/>\n                    </Paper>\n                    <Paper className=\"back\">\n                        <img className={classes.img} src={item}/>\n                    </Paper>\n                </div>\n            </div>\n        </Grid>\n    )\n}\n\nexport default Card\n","/home/niko/work/pokeGame/poke-game/client/src/components/page/gamePage/modalWindow.js",["58","59"],"import React, {useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Link} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeRecords} from \"../../../actions/gameInfoActions\";\n\nconst ModalWindow = ({open, errors, time, restart}) => {\n    const dispatch = useDispatch()\n    const gameInfo = useSelector(state => state)\n    const timeIsSek = time / 1000\n    const score = 100\n    const scoreCof = 0.25\n    const playerScore = score - (scoreCof * (timeIsSek + errors * 5)) < 0 ? 0 : score - (scoreCof * (timeIsSek + errors * 5))\n    const results = {...gameInfo.records, [gameInfo.lastPlayer]: {score: Math.round(playerScore), time: timeIsSek}}\n\n    useEffect(() => {dispatch(changeRecords(results))},[])\n    useEffect(()=> {localStorage.setItem('game',JSON.stringify(gameInfo))},[])\n\n    return (\n        <Dialog\n            open={open}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"You made it!\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    <div>errors: {errors}</div>\n                    <div>time: {timeIsSek} s</div>\n                    <div>score: {Math.round(playerScore)}</div>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Link to={'/game'}>\n                    <Button color=\"primary\" onClick={restart}>\n                        Restart Game\n                    </Button>\n                </Link>\n                <Link to={'/'}>\n                    <Button color=\"primary\">\n                        Reset Game\n                    </Button>\n                </Link>\n                <Link to={'/records'}>\n                    <Button color=\"primary\">\n                        Results\n                    </Button>\n                </Link>\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default ModalWindow\n",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":1,"nodeType":"66","endLine":10,"endColumn":2},{"ruleId":"67","severity":1,"message":"68","line":79,"column":40,"nodeType":"69","endLine":79,"endColumn":42,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":84,"column":13,"nodeType":"73","endLine":84,"endColumn":55},{"ruleId":"67","severity":1,"message":"74","line":18,"column":8,"nodeType":"69","endLine":18,"endColumn":14,"suggestions":"75"},{"ruleId":"67","severity":1,"message":"76","line":30,"column":8,"nodeType":"69","endLine":30,"endColumn":15,"suggestions":"77"},{"ruleId":"67","severity":1,"message":"78","line":31,"column":34,"nodeType":"69","endLine":31,"endColumn":47,"suggestions":"79"},{"ruleId":"71","severity":1,"message":"72","line":55,"column":25,"nodeType":"73","endLine":55,"endColumn":66},{"ruleId":"71","severity":1,"message":"72","line":58,"column":25,"nodeType":"73","endLine":58,"endColumn":66},{"ruleId":"67","severity":1,"message":"80","line":21,"column":56,"nodeType":"69","endLine":21,"endColumn":58,"suggestions":"81"},{"ruleId":"67","severity":1,"message":"82","line":22,"column":76,"nodeType":"69","endLine":22,"endColumn":78,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPlayersNames'. Either include it or remove the dependency array.","ArrayExpression",["86"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'array.length' and 'time'. Either include them or remove the dependency array. You can also do a functional update 'setTime(t => ...)' if you only need 'time' in the 'setTime' call.",["87"],"React Hook useEffect has missing dependencies: 'done' and 'error'. Either include them or remove the dependency array. You can also do a functional update 'setDone(d => ...)' if you only need 'done' in the 'setDone' call.",["88"],"React Hook useEffect has a missing dependency: 'checkFlip'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has missing dependencies: 'dispatch' and 'results'. Either include them or remove the dependency array.",["90"],"React Hook useEffect has a missing dependency: 'gameInfo'. Either include it or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [getPlayersNames]",{"range":"104","text":"105"},"Update the dependencies array to be: [array.length, done, time]",{"range":"106","text":"107"},"Update the dependencies array to be: [done, error, state]",{"range":"108","text":"109"},"Update the dependencies array to be: [value, done, checkFlip]",{"range":"110","text":"111"},"Update the dependencies array to be: [dispatch, results]",{"range":"112","text":"113"},"Update the dependencies array to be: [gameInfo]",{"range":"114","text":"115"},[2167,2169],"[getPlayersNames]",[576,582],"[array.length, done, time]",[980,987],"[done, error, state]",[666,679],"[value, done, checkFlip]",[1061,1063],"[dispatch, results]",[1140,1142],"[gameInfo]"]