{"version":3,"sources":["components/page/gamePage/images/aa.png","components/page/gamePage/images/nirvana.png","components/page/gamePage/images/kish.png","components/page/gamePage/images/tfk.png","components/page/gamePage/images/am.png","components/page/gamePage/images/tdg.png","components/page/gamePage/images/gd.png","components/page/gamePage/images/lp.png","components/page/gamePage/images/fon.png","components/page/gamePage/Card.js","actions/gameInfoActions.js","components/page/gamePage/modalWindow.js","components/page/gamePage/PlayingField.js","components/page/gamePage/gamePage.js","components/page/ startPage/images/logo.png","components/page/ startPage/startPage.js","components/page/recordPage/recordsPage.js","App.js","index.js","reducers/index.js"],"names":["useStyles","makeStyles","img","height","width","logo","container","margin","padding","Card","item","onClick","id","value","done","classes","useState","isFlip","setIsFlip","useEffect","checkFlip","inState","map","indexOf","isDone","Grid","xs","className","Paper","src","fon","getGameInfo","info","dispatch","type","payload","ModalWindow","open","errors","time","restart","useDispatch","gameInfo","useSelector","state","timeIsSek","playerScore","results","records","lastPlayer","score","Math","round","changeRecords","localStorage","setItem","JSON","stringify","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","to","Button","color","PlayingField","array","setState","setDone","error","setError","setOpen","setTime","length","Date","getTime","startGame","setTimeout","timeNow","checkValue","newValue","i","spacing","justify","button","background","GamePage","content","AskAleks","Nirvana","Kish","TFK","Am","TGH","Gd","LP","variant","newArray","j","floor","random","shuffleArray","concat","root","minHeight","display","flexDirection","alignItems","justifyContent","maxWidth","StartPage","gameData","names","setNames","lastPlayers","setValue","savePlayer","push","newGameData","players","Autocomplete","onChange","event","inputValue","onInputChange","freeSolo","options","option","style","renderInput","params","TextField","label","disabled","RecordsPage","rows","Object","keys","name","sort","a","b","Typography","TableContainer","component","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","row","scope","App","parse","getItem","path","exact","store","createStore","action","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.40464526.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/aa.c16240f3.png\";","export default __webpack_public_path__ + \"static/media/nirvana.fb4f99fb.png\";","export default __webpack_public_path__ + \"static/media/kish.a839ca22.png\";","export default __webpack_public_path__ + \"static/media/tfk.a0b6f1c9.png\";","export default __webpack_public_path__ + \"static/media/am.c1caf580.png\";","export default __webpack_public_path__ + \"static/media/tdg.31e7ba33.png\";","export default __webpack_public_path__ + \"static/media/gd.a5a3bd8f.png\";","export default __webpack_public_path__ + \"static/media/lp.f3278b45.png\";","export default __webpack_public_path__ + \"static/media/fon.df6f7535.png\";","import React, {useEffect, useState} from 'react';\nimport {Grid, makeStyles, Paper} from \"@material-ui/core\";\nimport fon from './images/fon.png'\n\nconst useStyles = makeStyles({\n    img: {\n        height: '30%',\n        width: 'auto'\n    },\n    logo: {\n        height: '60%',\n        width: 'auto'\n    },\n    container: {\n        margin: 0,\n        width: '100%',\n        padding: 20\n    }\n});\n\nconst Card = ({\n                  item,\n                  onClick,\n                  id,\n                  value,\n                  done\n              }) => {\n    const classes = useStyles()\n    const [isFlip, setIsFlip] = useState(false)\n\n    useEffect(() => checkFlip(), [value, done])\n\n    const checkFlip = () => {\n        const stateNames = value.map(item => item.id)\n        const inState = stateNames.indexOf(id)\n        const isDone = done.indexOf(item)\n        if (inState !== -1 || isDone !== -1) {\n            setIsFlip(true)\n        } else {\n            setIsFlip(false)\n        }\n    }\n\n    const checkValue = () => {\n        if (!isFlip) {\n            onClick(item, id)\n        }\n    }\n\n    return (\n        <Grid item xs={3} className={classes.container} onClick={checkValue}>\n            <div className={isFlip ? 'flip-container active' : 'flip-container'}>\n                <div className=\"flipper\">\n                    <Paper className=\"front\">\n                        <img className={classes.logo} src={fon}/>\n                    </Paper>\n                    <Paper className=\"back\">\n                        <img className={classes.img} src={item}/>\n                    </Paper>\n                </div>\n            </div>\n        </Grid>\n    )\n}\n\nexport default Card\n","export const getGameInfo = (info) => dispatch => {\n    dispatch({ type: 'GET_INFO', payload: info })\n}\nexport const changeRecords = (results) => dispatch => {\n    dispatch({ type: 'CHANGE_RECORDS', payload: results })\n}\n","import React, {useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Link} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeRecords} from \"../../../actions/gameInfoActions\";\n\nconst ModalWindow = ({open, errors, time, restart}) => {\n    const dispatch = useDispatch()\n    const gameInfo = useSelector(state => state)\n    const timeIsSek = time / 1000\n    const score = 100\n    const scoreCof = 0.25\n    const playerScore = score - (scoreCof * (timeIsSek + errors * 5)) < 0 ? 0 : score - (scoreCof * (timeIsSek + errors * 5))\n    const results = {...gameInfo.records, [gameInfo.lastPlayer]: {score: Math.round(playerScore), time: timeIsSek}}\n\n    useEffect(() => {dispatch(changeRecords(results))},[])\n    useEffect(()=> {localStorage.setItem('game',JSON.stringify(gameInfo))},[])\n\n    return (\n        <Dialog\n            open={open}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"You made it!\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    <div>errors: {errors}</div>\n                    <div>time: {timeIsSek} s</div>\n                    <div>score: {Math.round(playerScore)}</div>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Link to={'/game'}>\n                    <Button color=\"primary\" onClick={restart}>\n                        Restart Game\n                    </Button>\n                </Link>\n                <Link to={'/'}>\n                    <Button color=\"primary\">\n                        Reset Game\n                    </Button>\n                </Link>\n                <Link to={'/records'}>\n                    <Button color=\"primary\">\n                        Results\n                    </Button>\n                </Link>\n            </DialogActions>\n        </Dialog>\n    );\n}\nexport default ModalWindow\n","import React, {useEffect, useState} from 'react';\nimport {Grid} from \"@material-ui/core\";\nimport Card from \"./Card\";\nimport ModalWindow from \"./modalWindow\";\n\nconst PlayingField = ({array}) => {\n    const [state, setState] = useState([])\n    const [done, setDone] = useState([...array])\n    const [error, setError] = useState(0)\n    const [open, setOpen] = useState(false)\n    const [time, setTime] = useState(0)\n\n    useEffect(() => {\n        if (done.length === array.length / 2) {\n            setTime(new Date().getTime() - time)\n            setOpen(true)\n        }\n    }, [done])\n    useEffect(() => startGame(), [])\n    useEffect(() => {\n        if (state.length === 2) {\n            const check = state[0].id !== state[1].id && state[0].value === state[1].value\n            if (check) {\n                setDone([...done, state[0].value])\n            } else {\n                setError(error + 1)\n            }\n            setTimeout(() => setState([]), 800)\n        }\n    }, [state])\n\n    const restart = () => {\n        setDone([...array])\n        setOpen(false)\n        setError(0)\n        setTime(0)\n        startGame()\n    }\n\n    const startGame = () => {\n        setTimeout(() => {\n            setDone([])\n            const timeNow = new Date().getTime()\n            setTime(timeNow)\n            setState([])\n        }, 5000)\n    }\n\n    const checkValue = (newValue, i) => {\n        if (state.length < 2) {\n            setState([...state, {id: i, value: newValue}])\n        }\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3} justify={\"center\"}>\n                {array.map((item, i) => <Card key={i}\n                                              id={i}\n                                              item={item}\n                                              done={done}\n                                              onClick={checkValue}\n                                              value={state}/>\n                )}\n            </Grid>\n            {open &&\n            <ModalWindow open={open} errors={error} time={time} restart={restart}/>\n            }\n        </div>\n    )\n}\n\nexport default PlayingField\n","import React from 'react';\nimport AskAleks from './images/aa.png'\nimport Nirvana from './images/nirvana.png'\nimport Kish from './images/kish.png'\nimport TFK from './images/tfk.png'\nimport Am from './images/am.png'\nimport TGH from './images/tdg.png'\nimport Gd from './images/gd.png'\nimport LP from './images/lp.png'\nimport PlayingField from \"./PlayingField\";\nimport {Link} from \"react-router-dom\";\nimport {Button, makeStyles} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    button: {\n        background: \"black\",\n        color: \"white\",\n        margin: 10,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    },\n});\n\nconst GamePage = () => {\n    const content = [AskAleks, Nirvana, Kish, TFK, Am, TGH, Gd, LP]\n    const classes = useStyles()\n    const dblArr = () => {\n        return content.concat(content)\n    }\n\n    const shuffleArray = (array) => {\n        let newArray = array\n        for (let i = newArray.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n        }\n        return newArray\n    }\n    return (\n        <div>\n            <Link to={'/'}>\n                <Button variant={\"contained\"}\n                        color={\"primary\"}\n                        className={classes.button}\n                >\n                    reset game\n                </Button>\n            </Link>\n            <PlayingField array={shuffleArray(dblArr())}/>\n        </div>\n    )\n}\n\nexport default GamePage\n","export default __webpack_public_path__ + \"static/media/logo.df6f7535.png\";","import React, {useEffect, useState} from 'react';\nimport {Button, makeStyles, TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {Link} from \"react-router-dom\";\nimport logo from './images/logo.png'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getGameInfo} from \"../../../actions/gameInfoActions\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        minHeight: '85vh',\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    button: {\n        background: \"black\",\n        color: \"white\",\n        margin: 25,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    },\n    logo: {\n        maxWidth:'90%'\n    }\n});\n\nconst StartPage = () => {\n    const dispatch = useDispatch()\n    const gameData = useSelector(state => state)\n    const [names, setNames] = useState([])\n    const lastPlayers = gameData.lastPlayer || ''\n    const [value, setValue] = useState('');\n\n\n    const getPlayersNames = () => {\n        if (gameData.players) {\n            setNames(gameData.players)\n        }\n    }\n\n    const savePlayer = () => {\n        if (names.indexOf(value) === -1) {\n            names.push(value)\n        }\n        const newGameData = {...gameData, players: names, lastPlayer: value}\n        localStorage.setItem('game',JSON.stringify(newGameData))\n        dispatch(getGameInfo(newGameData))\n    }\n\n    const renderButton = () => {\n        if (!value) {\n            return (\n                <Button variant={\"contained\"}\n                        disabled\n                        className={classes.button}\n                >\n                    start\n                </Button>\n            )\n        }\n        return (\n            <Link to={'/game'}>\n                <Button variant={\"contained\"}\n                        color={\"primary\"}\n                        className={classes.button}\n                        onClick={savePlayer}\n                >\n                    start\n                </Button>\n            </Link>\n        )\n    }\n\n    useEffect(() => getPlayersNames(), [])\n\n    const classes = useStyles()\n    return (\n        <div className={classes.root}>\n            <img src={logo} className={classes.logo}/>\n            <br/>\n            <Autocomplete\n                value={lastPlayers}\n                onChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n                inputValue={value || ''}\n                onInputChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n                freeSolo\n                id=\"free-solo-demo\"\n                options={names.map((option) => option)}\n                style={{width: '300px'}}\n                renderInput={(params) => (\n                    <TextField {...params} label=\"Who are you?\" margin=\"normal\" variant=\"outlined\"/>\n                )}\n            />\n            {renderButton()}\n        </div>\n    )\n}\n\nexport default StartPage\n","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {\n    Button,\n    makeStyles,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow, Typography\n} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    button: {\n        background: \"black\",\n        color: \"white\",\n        margin: 10,\n        '&:hover': {\n            background: \"white\",\n            color: \"black\",\n        },\n    }\n});\n\n\nconst RecordsPage = () => {\n    const classes = useStyles()\n    const records = useSelector(state => state.records)\n    const array = Object.keys(records).map(item=> ({name: item, time: records[item].time, score: records[item].score}))\n    const rows = array.sort((a,b)=>b.score - a.score)\nreturn (\n    <div>\n        <Link to={'/game'}>\n            <Button variant={\"contained\"}\n                    color={\"primary\"}\n                    className={classes.button}\n            >\n                Restart\n            </Button>\n        </Link>\n        <Link to={'/'}>\n            <Button variant={\"contained\"}\n                    className={classes.button}\n                    color={\"primary\"}\n            >\n                reset game\n            </Button>\n        </Link>\n        <Typography variant={'h3'}>Game Score</Typography>\n        <TableContainer component={Paper}>\n            <Table size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Time</TableCell>\n                        <TableCell>Score</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.time}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.score}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    </div>\n)\n}\n\nexport default RecordsPage\n","import './App.css';\nimport GamePage from \"./components/page/gamePage/gamePage\";\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport StartPage from \"./components/page/ startPage/startPage\";\nimport {useDispatch} from \"react-redux\";\nimport {getGameInfo} from \"./actions/gameInfoActions\";\nimport RecordsPage from \"./components/page/recordPage/recordsPage\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const gameData = JSON.parse(localStorage.getItem('game')) || {}\n    dispatch(getGameInfo(gameData))\n    return (\n        <BrowserRouter>\n            <Route path={'/'} exact component={StartPage}/>\n            <Route path={'/game'} component={GamePage}/>\n            <Route path={'/records'} component={RecordsPage}/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport reducer from './reducers/index'\nimport App from './App'\n\nconst store = createStore(reducer, {}, applyMiddleware(reduxThunk))\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.querySelector('#root')\n)\n\n","export default function (state = {}, action) {\n    switch (action.type) {\n        case 'GET_INFO':\n            return action.payload\n        case 'CHANGE_RECORDS':\n            return {...state,records: action.payload}\n        default:\n            return state\n    }\n}\n"],"sourceRoot":""}